<?php
namespace Capci\Collections;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-11-21 at 16:31:59.
 */
class HashSetTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var HashSet
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        require '../src/Capci/Collections/autoload.php';
        $this->object = new HashSet();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    private function assertSameSet(array $expected, array $actual) {
        $set = $this->object;
        
        $comparer = function($e1, $e2) use($set) {
            $h1 = $set->getEqualityComparer()->elementHashCode($e1);
            $h2 = $set->getEqualityComparer()->elementHashCode($e2);
            if($h1 !== $h2) {
                if($h1 > $h2) {
                    return 1;
                }
                return -1;
            }
            
            $h1 = $set->getEqualityComparer()->elementHashCode(gettype($e1));
            $h2 = $set->getEqualityComparer()->elementHashCode(gettype($e2));
            return $h1 - $h2;
        };
        usort($expected, $comparer);
        usort($actual, $comparer);
        $this->assertSame($expected, $actual);
    }
    
    public function test__construct() {
        try {
            new HashSet(0);
            $this->fail();
        } catch (\InvalidArgumentException $ex) {
        }
        
        try {
            new HashSet(1, 0.0);
            $this->fail();
        } catch (\InvalidArgumentException $ex) {
        }
        
        try {
            new HashSet(1, NAN);
            $this->fail();
        } catch (\InvalidArgumentException $ex) {
        }
    }

    public function testCount() {
        $this->assertSame(0, $this->object->count());
        
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->assertSame(3, $this->object->count());
    }
    
    public function testIsEmpty() {
        $this->assertTrue($this->object->isEmpty());
        
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->assertFalse($this->object->isEmpty());
    }
    
    public function testClear() {
        $this->object->clear();
        $this->assertSame(0, $this->object->count());
        
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->clear();
        $this->assertSame(0, $this->object->count());
    }
    
    public function testGetIterator() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $actual = [];
        foreach ($this->object as $e) {
            $actual[] = $e;
        }
        usort($actual, function($e1, $e2) {
            return $e1 - $e2;
        });
        $this->assertSameSet([1, 2, 3, 4, 5], $actual);
    }
    
    public function testAdd() {
        $this->assertTrue($this->object->add(null));
        $this->assertSame([null], $this->object->toArray());
        
        $this->object->clear();
        $this->assertTrue($this->object->add(1));
        $this->assertTrue($this->object->add(2));
        $this->assertTrue($this->object->add(3));
        $this->assertFalse($this->object->add(2));
        
        $this->assertSameSet([1, 2, 3], $this->object->toArray());
    }
    
    public function testContains() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(null);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertTrue($this->object->contains(1));
        $this->assertTrue($this->object->contains(4));
        $this->assertTrue($this->object->contains(5));
        $this->assertTrue($this->object->contains(null));
        
        $this->assertFalse($this->object->contains(0));
    }
    
    public function testRemove() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(true, $this->object->remove(1));
        $this->assertSame(4, $this->object->count());
        $this->assertSameSet([2, 3, 4, 5], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(true, $this->object->remove(3));
        $this->assertSame(4, $this->object->count());
        $this->assertSameSet([1, 2, 4, 5], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(true, $this->object->remove(5));
        $this->assertSame(4, $this->object->count());
        $this->assertSameSet([1, 2, 3, 4], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(false, $this->object->remove(0));
        $this->assertSame(5, $this->object->count());
        $this->assertSameSet([1, 2, 3, 4, 5], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(false, $this->object->remove(new \stdClass()));
        $this->assertSame(5, $this->object->count());
        $this->assertSameSet([1, 2, 3, 4, 5], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(false, $this->object->remove('3'));
        $this->assertSame(5, $this->object->count());
        $this->assertSameSet([1, 2, 3, 4, 5], $this->object->toArray());
    }
    
    public function testRehash() {
        ini_set('memory_limit', '512M');
        
        $numOfTrials = 10000;
        $expected = [];
        for($i = 0; $i < $numOfTrials; ++$i) {
            $this->object->add($i);
            $expected[] = $i;
        }
        $actual = $this->object->toArray();
        $this->assertSameSet($expected, $actual);
    }
    
    public function testFilter() {
        $this->object->addAll(range(-10, 10));
        $this->object->filter(function($e) {
            return $e % 2 === 0;
        });
        $this->assertSameSet([-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10], $this->object->toArray());
    }
}
