<?php
namespace Capci\Collections;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-11-21 at 16:31:59.
 */
class AbstractCollection_GetDefaultEqualityComparerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractCollection
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        require '../src/Capci/Collections/autoload.php';
        $this->object = new class() extends AbstractCollection {
            
            public $r = [];
            
            public function clear() {
                $this->r = [];
            }

            public function getIterator(): \Traversable {
                return new \ArrayIterator($this->r);
            }
        };
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testGetDefaultEqualityComparer_elementsEquals_1() {
        $comparer = AbstractCollection::getDefaultEqualityComparer();
        
        $this->assertTrue($comparer->elementsEquals(123, 123));
        $this->assertTrue($comparer->elementsEquals('foo', 'foo'));
        $this->assertTrue($comparer->elementsEquals(1.23, 1.23));
        $this->assertTrue($comparer->elementsEquals(null, null));
        $this->assertTrue($comparer->elementsEquals(true, true));
        $this->assertTrue($comparer->elementsEquals(false, false));
        $this->assertTrue($comparer->elementsEquals([1, 2, 3], [1, 2, 3]));
        $this->assertTrue($comparer->elementsEquals($o = new \stdClass(), $o));
        $this->assertTrue($comparer->elementsEquals($r = fopen('php://output', 'w'), $r));
    }
    
    public function testGetDefaultEqualityComparer_elementsEquals_2() {
        $comparer = AbstractCollection::getDefaultEqualityComparer();
        
        $this->assertFalse($comparer->elementsEquals(123, 124));
        $this->assertFalse($comparer->elementsEquals('foo', 'bar'));
        $this->assertFalse($comparer->elementsEquals(1.23, 1.24));
        $this->assertFalse($comparer->elementsEquals(NAN, NAN));
        $this->assertFalse($comparer->elementsEquals(NAN, sqrt(-1.0)));
        $this->assertFalse($comparer->elementsEquals(null, 1));
        $this->assertFalse($comparer->elementsEquals(true, false));
        $this->assertFalse($comparer->elementsEquals([1, 2, 3], [1, 2, 4]));
        $this->assertFalse($comparer->elementsEquals([1, 2, 3], [3, 2, 1]));
        $this->assertFalse($comparer->elementsEquals($o = new \stdClass(), new \stdClass()));
        $this->assertFalse($comparer->elementsEquals($r = fopen('php://output', 'w'), fopen('php://output', 'w')));
    }
    
    public function testGetDefaultEqualityComparer_elementsEquals_3() {
        $comparer = AbstractCollection::getDefaultEqualityComparer();
        
        $this->assertFalse($comparer->elementsEquals(123, '123'));
        $this->assertFalse($comparer->elementsEquals(1.23, '1.23'));
        $this->assertFalse($comparer->elementsEquals(null, 0));
        $this->assertFalse($comparer->elementsEquals(null, false));
        $this->assertFalse($comparer->elementsEquals(null, []));
        $this->assertFalse($comparer->elementsEquals(0, false));
        $this->assertFalse($comparer->elementsEquals(0, []));
        $this->assertFalse($comparer->elementsEquals(false, []));
    }
    
    public function testGetDefaultEqualityComparer_elementHashCode_1() {
        // 同値の要素は、必ず同じハッシュ値を返す。
        $comparer = AbstractCollection::getDefaultEqualityComparer();
        
        $this->assertSame($comparer->elementHashCode(123), $comparer->elementHashCode(123));
        $this->assertSame($comparer->elementHashCode('foo'), $comparer->elementHashCode('foo'));
        $this->assertSame($comparer->elementHashCode(1.23), $comparer->elementHashCode(1.23));
        $this->assertSame($comparer->elementHashCode(null), $comparer->elementHashCode(null));
        $this->assertSame($comparer->elementHashCode(true), $comparer->elementHashCode(true));
        $this->assertSame($comparer->elementHashCode(false), $comparer->elementHashCode(false));
        $this->assertSame($comparer->elementHashCode([1, 2, 3]), $comparer->elementHashCode([1, 2, 3]));
        $this->assertSame($comparer->elementHashCode($o = new \stdClass()), $comparer->elementHashCode($o));
        $this->assertSame($comparer->elementHashCode($r = fopen('php://output', 'w')), $comparer->elementHashCode($r));
    }
    
    private function prepareTestGetDefaultEqualityComparer_elementHashCode_NotEquals() {
        // 同値でない要素は、できるだけ異なるハッシュ値を返す。
        // 十分な数の同値でない要素のペアに対してハッシュ値を比較し、衝突する回数が十分に小さければ可とする。
        $comparer = AbstractCollection::getDefaultEqualityComparer();
        $trialGenerator = function(EqualityComparer $comparer, int $numberOfTrials, \Closure $elementGenerator, \Closure $secondElementGenerator = null): \Traversable {
            $trials = new \SplFixedArray($numberOfTrials);
            for($i = 0; $i < $numberOfTrials; ++$i) {
                $e1 = $elementGenerator();
                if($secondElementGenerator === null) {
                    $e2 = $elementGenerator();
                } else {
                    $e2 = $secondElementGenerator();
                }
                
                if($comparer->elementsEquals($e1, $e2)) {
                    --$i;
                    continue;
                }
                $trials[$i] = [$e1, $e2];
            }
            return $trials;
        };
        $try = function(EqualityComparer $comparer, \Traversable $trials): int {
            $numberOfCollision = 0;
            foreach ($trials as list($e1, $e2)) {
                if($comparer->elementHashCode($e1) === $comparer->elementHashCode($e2)) {
                    ++$numberOfCollision;
                }
            }
            return $numberOfCollision;
        };
        return [$comparer, $trialGenerator, $try];
    }
    public function testGetDefaultEqualityComparer_elementHashCode_Int() {
        $this->markTestSkipped('テストの実行に時間、メモリを消費するため、保留にしています。');
        
        ini_set('memory_limit', '512M');
        list($comparer, $trialGenerator, $try) = $this->prepareTestGetDefaultEqualityComparer_elementHashCode_NotEquals();
        
        //同値でないintは必ず異なるハッシュ値となる。
        $numberOfTrials = 100000;
        $threshold = 0;
        $trials = $trialGenerator($comparer, $numberOfTrials, function() {
            $max = (int)($randMax = mt_getrandmax() / 2);
            $min = $max - $randMax;
            return mt_rand($min, $max);
        });
        $numberOfCollisions = $try($comparer, $trials);
        echo 'Collisions: ' . $numberOfCollisions . PHP_EOL;
        $this->assertLessThanOrEqual($threshold, $numberOfCollisions);
    }
    public function testGetDefaultEqualityComparer_elementHashCode_String() {
        $this->markTestSkipped('テストの実行に時間、メモリを消費するため、保留にしています。');
        
        ini_set('memory_limit', '512M');
        list($comparer, $trialGenerator, $try) = $this->prepareTestGetDefaultEqualityComparer_elementHashCode_NotEquals();
        
        $numberOfTrials = 100000;
        $threshold = 5;
        $trials = $trialGenerator($comparer, $numberOfTrials, function() {
            // 0バイトから1024バイトのバイト列を要素とする。
            $len = mt_rand(0, 1024);
            $s = '';
            for($i = 0; $i < $len; ++$i) {
                $s .= chr(mt_rand(0, 255));
            }
            return $s;
        });
        $numberOfCollisions = $try($comparer, $trials);
        echo 'Collisions: ' . $numberOfCollisions . PHP_EOL;
        $this->assertLessThanOrEqual($threshold, $numberOfCollisions);
    }
    public function testGetDefaultEqualityComparer_elementHashCode_FloatNotNan() {
        $this->markTestSkipped('テストの実行に時間、メモリを消費するため、保留にしています。');
        
        ini_set('memory_limit', '512M');
        list($comparer, $trialGenerator, $try) = $this->prepareTestGetDefaultEqualityComparer_elementHashCode_NotEquals();
        
        //同値でないfloatは必ず異なるハッシュ値となる。
        $numberOfTrials = 100000;
        $threshold = 0;
        $trials = $trialGenerator($comparer, $numberOfTrials, function() {
            while (true) {
                $max = (int)($randMax = mt_getrandmax() / 2);
                $min = $max - $randMax;
                $intBits = mt_rand($min, $max);
                $f = unpack('d', pack('q', $intBits))[1];
                if(!is_nan($f)) {
                    return $f;
                }
            }
        });
        $numberOfCollisions = $try($comparer, $trials);
        echo 'Collisions: ' . $numberOfCollisions . PHP_EOL;
        $this->assertLessThanOrEqual($threshold, $numberOfCollisions);
    }
    public function testGetDefaultEqualityComparer_elementHashCode_FloatNan() {
        $this->markTestSkipped('テストの実行に時間、メモリを消費するため、保留にしています。');
        
        ini_set('memory_limit', '512M');
        list($comparer, $trialGenerator, $try) = $this->prepareTestGetDefaultEqualityComparer_elementHashCode_NotEquals();
        
        $numberOfTrials = 100000;
        $threshold = 5;
        $trials = $trialGenerator($comparer, $numberOfTrials, function() {
            return NAN;
        }, function() {
            while (true) {
                $max = (int)($randMax = mt_getrandmax() / 2);
                $min = $max - $randMax;
                $intBits = mt_rand($min, $max);
                $f = unpack('d', pack('q', $intBits))[1];
                return $f;
            }
        });
        $numberOfCollisions = $try($comparer, $trials);
        echo 'Collisions: ' . $numberOfCollisions . PHP_EOL;
        $this->assertLessThanOrEqual($threshold, $numberOfCollisions);
    }
    public function testGetDefaultEqualityComparer_elementHashCode_Null() {
        $comparer = AbstractCollection::getDefaultEqualityComparer();
        
        $this->assertSame($comparer->elementHashCode(null), $comparer->elementHashCode(null));
    }
    public function testGetDefaultEqualityComparer_elementHashCode_Bool() {
        $comparer = AbstractCollection::getDefaultEqualityComparer();
        
        $this->assertSame($comparer->elementHashCode(true), $comparer->elementHashCode(true));
        $this->assertSame($comparer->elementHashCode(false), $comparer->elementHashCode(false));
        $this->assertNotSame($comparer->elementHashCode(true), $comparer->elementHashCode(false));
    }
    public function testGetDefaultEqualityComparer_elementHashCode_Array() {
        $this->markTestSkipped('テストの実行に時間、メモリを消費するため、保留にしています。');
        
        ini_set('memory_limit', '512M');
        list($comparer, $trialGenerator, $try) = $this->prepareTestGetDefaultEqualityComparer_elementHashCode_NotEquals();
        
        $numberOfTrials = 10000;
        $threshold = 5;
        $arrayMaxSize = 10;
        $intGenerator = function() {
            $max = (int)($randMax = mt_getrandmax() / 2);
            $min = $max - $randMax;
            return mt_rand($min, $max);
        };
        $stringGenerator = function() {
            // 0バイトから1024バイトのバイト列を要素とする。
            $len = mt_rand(0, 1024);
            $s = '';
            for($i = 0; $i < $len; ++$i) {
                $s .= chr(mt_rand(0, 255));
            }
            return $s;
        };
        $varGenerator = function(int $type = 0, int $arrayMaxSize = 4, bool $allowEmptyArray = true) use(&$varGenerator, $intGenerator, $stringGenerator) {
            if($type === 0 || $type < 1 || $type > 8) {
                $type = mt_rand(1, 8);
            }
            switch ($type) {
                case 1:
                    return mt_rand(0, 1) === 0 ? false : true;
                case 2:
                    return $intGenerator();
                case 3:
                    $max = (int)($randMax = mt_getrandmax() / 2);
                    $min = $max - $randMax;
                    $intBits = mt_rand($min, $max);
                    return unpack('d', pack('q', $intBits))[1];
                case 4:
                    return $stringGenerator();
                case 5:
                    $num = mt_rand($allowEmptyArray ? 0 : 1, $arrayMaxSize);
                    $arr = [];
                    for($i = 0; $i < $num; ++$i) {
                        $key = mt_rand(0, 1) === 0 ? $intGenerator() : $stringGenerator();
                        $val = $varGenerator(0, $arrayMaxSize);
                        $arr[$key] = $val;
                    }
                    return $arr;
                case 6:
                    return new \stdClass();
                case 7:
                    return fopen('php://output', 'w');
                default:
                    return null;
            }
        };
        $trials = $trialGenerator($comparer, $numberOfTrials, function() use($varGenerator, $arrayMaxSize) {
            return $varGenerator(5, $arrayMaxSize, false);
        });
        $numberOfCollisions = $try($comparer, $trials);
        echo 'Collisions: ' . $numberOfCollisions . PHP_EOL;
        $this->assertLessThanOrEqual($threshold, $numberOfCollisions);
    }
    public function testGetDefaultEqualityComparer_elementHashCode_Object() {
        $this->markTestSkipped('テストの実行に時間、メモリを消費するため、保留にしています。');
        
        ini_set('memory_limit', '512M');
        list($comparer, $trialGenerator, $try) = $this->prepareTestGetDefaultEqualityComparer_elementHashCode_NotEquals();
        
        $numberOfTrials = 100000;
        $threshold = 5;
        $trials = $trialGenerator($comparer, $numberOfTrials, function() {
            return new \stdClass();
        });
        $numberOfCollisions = $try($comparer, $trials);
        echo 'Collisions: ' . $numberOfCollisions . PHP_EOL;
        $this->assertLessThanOrEqual($threshold, $numberOfCollisions);
    }
    public function testGetDefaultEqualityComparer_elementHashCode_Resource() {
        $this->markTestSkipped('テストの実行に時間、メモリを消費するため、保留にしています。');
        
        ini_set('memory_limit', '512M');
        list($comparer, $trialGenerator, $try) = $this->prepareTestGetDefaultEqualityComparer_elementHashCode_NotEquals();
        
        $numberOfTrials = 100000;
        $threshold = 5;
        $trials = $trialGenerator($comparer, $numberOfTrials, function() {
            $r = fopen('php://output', 'w');
            if(mt_rand(0, 1) === 0) {
                fclose($r);
            }
            return $r;
        });
        $numberOfCollisions = $try($comparer, $trials);
        echo 'Collisions: ' . $numberOfCollisions . PHP_EOL;
        $this->assertLessThanOrEqual($threshold, $numberOfCollisions);
    }
}
