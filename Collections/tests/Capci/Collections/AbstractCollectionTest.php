<?php
namespace Capci\Collections;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-11-21 at 16:31:59.
 */
class AbstractCollectionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractCollection
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        require '../src/Capci/Collections/autoload.php';
        $this->object = new class() extends AbstractCollection {
            
            public $r = [];
            
            public function clear() {
                $this->r = [];
            }

            public function getIterator(): \Traversable {
                return new \ArrayIterator($this->r);
            }
        };
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testCount() {
        $this->assertSame(0, $this->object->count());
        
        $this->object->r = [1, 2, 3];
        $this->assertSame(3, $this->object->count());
    }
    
    public function testIsEmpty() {
        $this->assertTrue($this->object->isEmpty());
        
        $this->object->r = [1, 2, 3];
        $this->assertFalse($this->object->isEmpty());
    }
    
    public function testToArray() {
        $this->assertSame([], $this->object->toArray());
        
        $this->object->r = [1, 2, 3];
        $this->assertSame([1, 2, 3], $this->object->toArray());
    }
    
    public function testCompareElements() {
        $this->assertTrue($this->object->compareElements(1, 1));
        $this->assertTrue($this->object->compareElements('foo', 'foo'));
        $this->assertTrue($this->object->compareElements(null, null));
        
        $this->assertFalse($this->object->compareElements(1, 2));
        $this->assertFalse($this->object->compareElements('foo', 'bar'));
        $this->assertFalse($this->object->compareElements(1, '1'));
        $this->assertFalse($this->object->compareElements(null, 0));
        $this->assertFalse($this->object->compareElements(new \stdClass(), new \stdClass()));
    }
}
