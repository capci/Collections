<?php
namespace Capci\Collections;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-11-21 at 16:31:59.
 */
class ArrayList_2Test extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ArrayList
     */
    protected $object;
    
    protected $elements;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        require '../src/Capci/Collections/autoload.php';
        $this->object = new ArrayList();
        $this->elements = [];
        $this->object->add($this->elements[] = false);
        $this->object->add($this->elements[] = true);
        $this->object->add($this->elements[] = 0);
        $this->object->add($this->elements[] = 123);
        $this->object->add($this->elements[] = PHP_INT_MAX);
        $this->object->add($this->elements[] = PHP_INT_MIN);
        $this->object->add($this->elements[] = 0.0);
        $this->object->add($this->elements[] = 1.23);
        //$this->object->add($this->elements[] = NAN);
        $this->object->add($this->elements[] = INF);
        $this->object->add($this->elements[] = '');
        $this->object->add($this->elements[] = 'test');
        $this->object->add($this->elements[] = new \stdClass());
        $this->object->add($this->elements[] = function() {});
        $this->object->add($this->elements[] = new class extends \stdClass {});
        $this->object->add($this->elements[] = fopen("php://output", "w"));
        $r = fopen("php://output", "w");
        fclose($r);
        $this->object->add($this->elements[] = $r);
        $this->object->add($this->elements[] = null);
        $this->object->add($this->elements[] = []);
        $this->object->add($this->elements[] = [true, 1, 1.23, 'foo', new \stdClass(), fopen("php://output", "w"), null, ['a', 'b', 3]]);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testCount() {
        $this->assertSame(count($this->elements), $this->object->count());
        $this->assertSame(count($this->elements), count($this->object));
    }
    
    public function testIsEmpty() {
        $this->assertFalse($this->object->isEmpty());
    }
    
    public function testClear() {
        $this->object->clear();
        $this->assertTrue($this->object->isEmpty());
        foreach ($this->object as $e) {
            $this->fail();
        }
    }
    
    public function testToArray() {
        $this->assertSame($this->elements, $this->object->toArray());
    }
    
    public function testAdd() {
        $this->object->add($this->elements[] = 'bar');
        $this->assertSame($this->elements, $this->object->toArray());
    }
    
    public function testAddAll() {
        $c = new ArrayList();
        $c->add($this->elements[] = 'bar');
        $c->add($this->elements[] = 'bar2');
        $this->object->addAll($c);
        $this->assertSame($this->elements, $this->object->toArray());
    }
    
    public function testInsert() {
        $index = mt_rand(0, $this->object->count());
        $this->object->insert($index, 'bar');
        array_splice($this->elements, $index, 0, ['bar']);
        $this->assertSame($this->elements, $this->object->toArray());
    }
    
    public function testInsertAll() {
        $index = mt_rand(0, $this->object->count());
        $c = new ArrayList();
        $c->add('bar');
        $c->add('bar2');
        $this->object->insertAll($index, $c);
        array_splice($this->elements, $index, 0, ['bar', 'bar2']);
        $this->assertSame($this->elements, $this->object->toArray());
    }
    
    public function testGet() {
        $index = mt_rand(0, $this->object->count() - 1);
        $this->assertSame($this->elements[$index], $this->object->get($index));
        
        try {
            $this->object->get(-1);
            $this->fail();
        } catch (\OutOfRangeException $ex) {
        }
        
        try {
            $this->object->get($this->object->count());
            $this->fail();
        } catch (\OutOfRangeException $ex) {
        }
    }
    
    public function testGetOrDefault() {
        $index = mt_rand(0, $this->object->count() - 1);
        $this->assertSame($this->elements[$index], $this->object->getOrDefault($index));
        
        $this->assertSame(null, $this->object->getOrDefault(-1));
        $this->assertSame(null, $this->object->getOrDefault($this->object->count()));
    }
    
    public function testSet() {
        $index = mt_rand(0, $this->object->count() - 1);
        $this->assertSame($this->elements[$index], $this->object->set($index, 'bar'));
        
        $this->elements[$index] = 'bar';
        $this->assertSame($this->elements, $this->object->toArray());
        
        try {
            $this->object->set(-1, 'bar');
            $this->fail();
        } catch (\OutOfRangeException $ex) {
        }
        
        try {
            $this->object->set($this->object->count(), 'bar');
            $this->fail();
        } catch (\OutOfRangeException $ex) {
        }
    }
    
    public function testRemove() {
        $index = mt_rand(0, $this->object->count() - 1);
        $this->assertSame($this->elements[$index], $this->object->remove($index));
        
        array_splice($this->elements, $index, 1);
        $this->assertSame($this->elements, $this->object->toArray());
        
        try {
            $this->object->remove(-1);
            $this->fail();
        } catch (\OutOfRangeException $ex) {
        }
        
        try {
            $this->object->remove($this->object->count());
            $this->fail();
        } catch (\OutOfRangeException $ex) {
        }
    }
    
    public function testContains() {
        $index = mt_rand(0, $this->object->count() - 1);
        $this->assertTrue($this->object->contains($this->elements[$index]));
        
        $this->assertFalse($this->object->contains('bar'));
    }
    
    public function testContainsAll() {
        $index = mt_rand(0, $this->object->count() - 1);
        $this->assertTrue($this->object->containsAll($this->object));
        
        $c = new ArrayList();
        $c->add('bar');
        $this->assertFalse($this->object->containsAll($c));
    }
    
    public function testIndexOf() {
        $index = mt_rand(0, $this->object->count() - 1);
        $this->assertSame($index, $this->object->indexOf($this->elements[$index]));
        
        $this->assertSame(-1, $this->object->indexOf('bar'));
    }
    
    public function testLastIndexOf() {
        $index = mt_rand(0, $this->object->count() - 1);
        $this->assertSame($index, $this->object->lastIndexOf($this->elements[$index]));
        
        $this->assertSame(-1, $this->object->lastIndexOf('bar'));
    }
    
    public function testRange() {
        $index = mt_rand(0, $this->object->count() - 1);
        $this->assertSame([], $this->object->range($index, 0)->toArray());
        
        $count = $this->object->count() - $index;
        $this->assertSame(array_slice($this->elements, $index, $count), $this->object->range($index, $count)->toArray());
    }
    
    public function testOffsetGet() {
        $index = mt_rand(0, $this->object->count() - 1);
        $this->assertSame($this->elements[$index], $this->object[$index]);
        
        try {
            $this->object[-1];
            $this->fail();
        } catch (\OutOfRangeException $ex) {
        }
        
        try {
            $this->object[$this->object->count()];
            $this->fail();
        } catch (\OutOfRangeException $ex) {
        }
    }
    
    public function testOffsetSet() {
        $index = mt_rand(0, $this->object->count() - 1);
        $this->object[$index] = 'bar';
        
        $this->elements[$index] = 'bar';
        $this->assertSame($this->elements, $this->object->toArray());
        
        try {
            $this->object[-1] = 'bar';
            $this->fail();
        } catch (\OutOfRangeException $ex) {
        }
        
        try {
            $this->object[$this->object->count()] = 'bar';
            $this->fail();
        } catch (\OutOfRangeException $ex) {
        }
    }
    
    public function testOffsetUnset() {
        try {
            unset($this->object[0]);
            $this->fail();
        } catch (\BadMethodCallException $ex) {
            $this->assertSame($this->elements, $this->object->toArray());
        }
    }
    
    public function testOffsetExists() {
        //$index = mt_rand(0, $this->object->count() - 1);
        foreach (range(0, $this->object->count() - 1) as $index) {
            if($this->object->get($index) === null) {
                $this->assertFalse(isset($this->object[$index]));
            } else {
                $this->assertTrue(isset($this->object[$index]));
            }
        }
        
        $this->assertFalse(isset($this->object[-1]));
        
        $this->assertFalse(isset($this->object[$this->object->count()]));
    }
    
    public function testSort() {
        $comparer = $this->object->getEqualityComparer();
        $comparator = function($e1, $e2) use($comparer) {
            $h1 = $comparer->elementHashCode($e1);
            $h2 = $comparer->elementHashCode($e2);
            if($h1 > $h2) {
                return 1;
            } else if($h1 < $h2) {
                return -1;
            }
            
            $h1 = $comparer->elementHashCode(gettype($e1));
            $h2 = $comparer->elementHashCode(gettype($e2));
            if($h1 > $h2) {
                return 1;
            } else if($h1 < $h2) {
                return -1;
            }
            return 0;
        };
        $this->object->sort($comparator);
        usort($this->elements, $comparator);
        $this->assertSame($this->elements, $this->object->toArray());
    }
    
    public function testFilter() {
        $this->object->filter(function($i, $e) {
            return is_numeric($e);
        });
        $this->assertSame([0, 123, PHP_INT_MAX, PHP_INT_MIN, 0.0, 1.23, INF], $this->object->toArray());
    }
}
