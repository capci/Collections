<?php
namespace Capci\Collections;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-11-21 at 16:31:59.
 */
class AbstractSequenceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var AbstractSequence
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        require '../src/Capci/Collections/autoload.php';
        $this->object = new class() extends AbstractSequence {
            
            private $r = [];
            
            public function add($e) {
                $this->r[] = $e;
            }

            public function getIterator(): \Traversable {
                return new \ArrayIterator($this->r);
            }

            public function remove(int $index) {
                if($index < 0 || $index >= count($this->r)) {
                    throw new \OutOfRangeException();
                }
                $ret = $this->r[$index];
                array_splice($this->r, $index, 1);
                return $ret;
            }
        };
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function testClear() {
        $this->object->clear();
        $this->assertSame(0, $this->object->count());
        
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->clear();
        $this->assertSame(0, $this->object->count());
    }
    
    public function testAddAll() {
        $c = clone $this->object;
        
        $this->object->clear();
        $c->clear();
        $this->object->addAll($c);
        $this->assertSame([], $this->object->toArray());
        
        $this->object->clear();
        $c->clear();
        $c->add(1);
        $c->add(2);
        $c->add(3);
        $this->object->addAll($c);
        $this->assertSame([1, 2, 3], $this->object->toArray());
        
        $this->object->clear();
        $c->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $c->add(4);
        $c->add(5);
        $c->add(6);
        $this->object->addAll($c);
        $this->assertSame([1, 2, 3, 4, 5, 6], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->addAll([4, 5, 6]);
        $this->assertSame([1, 2, 3, 4, 5, 6], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->addAll([
            'foo' => 4, 
            'bar' => 5, 
            'test' => 6
        ]);
        $this->assertSame([1, 2, 3, 4, 5, 6], $this->object->toArray());
    }
    
    public function testInsert() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->object->insert(0, null);
        $this->assertSame([null, 1, 2, 3, 4, 5], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->object->insert(2, null);
        $this->assertSame([1, 2, null, 3, 4, 5], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->object->insert(5, null);
        $this->assertSame([1, 2, 3, 4, 5, null], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        try {
            $this->object->insert(-1, null);
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, 3, 4, 5], $this->object->toArray());
        }
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        try {
            $this->object->insert(6, null);
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, 3, 4, 5], $this->object->toArray());
        }
    }
    
    public function testInsertAll() {
        $c = clone $this->object;
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $c->clear();
        $c->add('foo');
        $c->add(null);
        $c->add('bar');
        $this->object->insertAll(0, $c);
        $this->assertSame(['foo', null, 'bar', 1, 2, 3, 4, 5], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $c->clear();
        $c->add('foo');
        $c->add(null);
        $c->add('bar');
        $this->object->insertAll(2, $c);
        $this->assertSame([1, 2, 'foo', null, 'bar', 3, 4, 5], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $c->clear();
        $c->add('foo');
        $c->add(null);
        $c->add('bar');
        $this->object->insertAll(5, $c);
        $this->assertSame([1, 2, 3, 4, 5, 'foo', null, 'bar'], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $c->clear();
        $c->add('foo');
        $c->add(null);
        $c->add('bar');
        try {
            $this->object->insertAll(-1, $c);
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, 3, 4, 5], $this->object->toArray());
            $this->assertSame(['foo', null, 'bar'], $c->toArray());
        }
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $c->clear();
        $c->add('foo');
        $c->add(null);
        $c->add('bar');
        try {
            $this->object->insertAll(6, $c);
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, 3, 4, 5], $this->object->toArray());
            $this->assertSame(['foo', null, 'bar'], $c->toArray());
        }
    }
    
    public function testInsertAll2() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->object->insertAll(0, ['foo', null, 'bar']);
        $this->assertSame(['foo', null, 'bar', 1, 2, 3, 4, 5], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->object->insertAll(2, ['foo', null, 'bar']);
        $this->assertSame([1, 2, 'foo', null, 'bar', 3, 4, 5], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->object->insertAll(5, ['foo', null, 'bar']);
        $this->assertSame([1, 2, 3, 4, 5, 'foo', null, 'bar'], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        try {
            $this->object->insertAll(-1, ['foo', null, 'bar']);
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, 3, 4, 5], $this->object->toArray());
        }
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        try {
            $this->object->insertAll(6, ['foo', null, 'bar']);
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, 3, 4, 5], $this->object->toArray());
        }
    }
    
    public function testGet() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(1, $this->object->get(0));
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(3, $this->object->get(2));
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(5, $this->object->get(4));
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        try {
            $this->object->get(-1);
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, 3, 4, 5], $this->object->toArray());
        }
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        try {
            $this->object->get(5);
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, 3, 4, 5], $this->object->toArray());
        }
    }
    
    public function testGetOrDefault() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(1, $this->object->getOrDefault(0, 'default'));
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(3, $this->object->getOrDefault(2, 'default'));
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(5, $this->object->getOrDefault(4, 'default'));
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame('default', $this->object->getOrDefault(-1, 'default'));
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame('default', $this->object->getOrDefault(5, 'default'));
    }
    
    public function testSet() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(1, $this->object->set(0, null));
        $this->assertSame([null, 2, 3, 4, 5], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(3, $this->object->set(2, null));
        $this->assertSame([1, 2, null, 4, 5], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(5, $this->object->set(4, null));
        $this->assertSame([1, 2, 3, 4, null], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        try {
            $this->object->set(-1, null);
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, 3, 4, 5], $this->object->toArray());
        }
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        try {
            $this->object->set(5, null);
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, 3, 4, 5], $this->object->toArray());
        }
    }
    
    public function testOffsetSet() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->object[0] = null;
        $this->assertSame([null, 2, 3, 4, 5], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->object[2] = null;
        $this->assertSame([1, 2, null, 4, 5], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->object[4] = null;
        $this->assertSame([1, 2, 3, 4, null], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->object[] = null;
        $this->assertSame([1, 2, 3, 4, 5, null], $this->object->toArray());
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        try {
            $this->object[-1] = null;
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, 3, 4, 5], $this->object->toArray());
        }
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        try {
            $this->object[5] = null;
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, 3, 4, 5], $this->object->toArray());
        }
    }
    
    public function testOffsetUnset() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        try {
            unset($this->object[0]);
            $this->fail();
        } catch (\BadMethodCallException $ex) {
            $this->assertSame([1, 2, 3, 4, 5], $this->object->toArray());
        }
    }
    
    public function testOffsetGet() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(1, $this->object[0]);
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(3, $this->object[2]);
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertSame(5, $this->object[4]);
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        try {
            $this->object[-1];
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, 3, 4, 5], $this->object->toArray());
        }
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(3);
        $this->object->add(4);
        $this->object->add(5);
        try {
            $this->object[5];
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, 3, 4, 5], $this->object->toArray());
        }
    }
    
    public function testOffsetExists() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(null);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertTrue(isset($this->object[0]));
        $this->assertTrue(isset($this->object[3]));
        $this->assertTrue(isset($this->object[4]));
        $this->assertFalse(isset($this->object[-1]));
        $this->assertFalse(isset($this->object[5]));
        $this->assertFalse(isset($this->object[2]));
    }
    
    public function testContains() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(null);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertTrue($this->object->contains(1));
        $this->assertTrue($this->object->contains(4));
        $this->assertTrue($this->object->contains(5));
        $this->assertTrue($this->object->contains(null));
        
        $this->assertFalse($this->object->contains(0));
    }
    
    public function testContainsAll() {
        $c = clone $this->object;
        
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(null);
        $this->object->add(4);
        $this->object->add(5);
        
        $c->clear();
        $c->add(2);
        $c->add(null);
        $c->add(4);
        $this->assertTrue($this->object->containsAll($c));
        
        $c->clear();
        $this->assertTrue($this->object->containsAll($c));
        
        $c->clear();
        $c->add(1);
        $c->add(2);
        $c->add(5);
        $c->add(0);
        $this->assertFalse($this->object->containsAll($c));
    }
    
    public function testContainsAll2() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(null);
        $this->object->add(4);
        $this->object->add(5);
        $this->assertTrue($this->object->containsAll([2, null, 4]));
        
        $this->assertTrue($this->object->containsAll([]));
        
        $this->assertFalse($this->object->containsAll([1, 2, 5, 0]));
    }
    
    public function testIndexOf() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(null);
        $this->object->add(4);
        $this->object->add(1);
        $this->object->add(5);
        
        $this->assertSame(0, $this->object->indexOf(1));
        $this->assertSame(2, $this->object->indexOf(null));
        $this->assertSame(5, $this->object->indexOf(5));
        
        $this->assertSame(-1, $this->object->indexOf(3));
    }
    
    public function testLastIndexOf() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(null);
        $this->object->add(4);
        $this->object->add(1);
        $this->object->add(5);
        
        $this->assertSame(4, $this->object->lastIndexOf(1));
        $this->assertSame(2, $this->object->lastIndexOf(null));
        $this->assertSame(5, $this->object->lastIndexOf(5));
        
        $this->assertSame(-1, $this->object->lastIndexOf(3));
    }
    
    public function testRange() {
        $this->object->clear();
        $this->object->add(1);
        $this->object->add(2);
        $this->object->add(null);
        $this->object->add(4);
        $this->object->add(5);
        
        $subSequence = $this->object->range(0, 5);
        $this->assertSame([1, 2, null, 4, 5], $subSequence->toArray());
        
        $subSequence = $this->object->range(1, 3);
        $this->assertSame([2, null, 4], $subSequence->toArray());
        
        try {
            $subSequence = $this->object->range(-1, 3);
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, null, 4, 5], $this->object->toArray());
        }
        
        try {
            $subSequence = $this->object->range(0, 6);
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, null, 4, 5], $this->object->toArray());
        }
        
        try {
            $subSequence = $this->object->range(2, 4);
            $this->fail();
        } catch (\OutOfRangeException $ex) {
            $this->assertSame([1, 2, null, 4, 5], $this->object->toArray());
        }
    }
    
    public function testSort() {
        $r = range(-10, 10);
        shuffle($r);
        $this->object->addAll($r);
        $this->object->sort(function($v1, $v2) {
            return $v1 - $v2;
        });
        $this->assertSame(range(-10, 10), $this->object->toArray());
    }
    
    public function testFilter() {
        $r = range(-10, 10);
        $this->object->addAll($r);
        $this->object->filter(function($i, $e) {
            return $e % 2 === 0;
        });
        $this->assertSame([-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10], $this->object->toArray());
    }
    
    public function testMap() {
        $r = range(-10, 10);
        $this->object->addAll($r);
        $this->object->map(function($i, $e) {
            return $e * 2;
        });
        $expected = [];
        foreach ($r as $i) {
            $expected[] = $i * 2;
        }
        $this->assertSame($expected, $this->object->toArray());
    }
    
    public function testShuffle() {
        $this->markTestSkipped('テストの実行に時間を消費するため、保留にしています。');
        
        $sums = [];
        $min = -10;
        $max = 10;
        foreach (range($min, $max) as $i) {
            $sums[$i] = 0;
        }
        
        $numOfTrials = 500;
        for($n = 0; $n < $numOfTrials; ++$n) {
            $this->object->clear();
            $this->object->addAll(range($min, $max));
            $this->object->shuffle();
            foreach ($this->object as $i => $e) {
                $sums[$e] += $i;
            }
        }
        $avgs = [];
        foreach ($sums as $e => $sum) {
            $avgs[$e] = $sum / $numOfTrials;
        }
        
        $center = ($max - $min) / 2;
        $d = 1.0;
        foreach ($avgs as $avg) {
            $this->assertTrue(abs($avg - $center) < $d);
        }
    }
}
